import { relative, resolve } from 'node:path'
version: "3.2"
services:
  rabbitmq-server:
    image: rabbitmq:3-management        # image name
    container_name: rabbitmq-server     # name the container
    hostname: rabbitmq-server           # name the host
    tty: true                           # boilerplate: allows -it basically ?
    stdin_open: true                    # boilerplate: allows -it basically ?
    networks:                           # allows containers to recognize the hostnames of other containers
      - my-application-network
    ports:
      - "5672:5672"                     # for message traffic
      - "15672:15672"                   # for managment console
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:15672"]
        interval: 60s
        timeout: 10s
        retries: 5
  # #### AUCTIONS-SERVICE
  auctions-postgres-server:
    image: auctions-postgres-server:latest
    container_name: auctions-postgres-server
    hostname: auctions-postgres-server
    environment:                        # sets environment variables
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecret
    volumes:
      - ${AUCTIONS_SERVICE_DIR_PATH}/auctions-service/db/create_db_and_empty_tables.sql:/docker-entrypoint-initdb.d/create_db_and_empty_tables.sql # runs if !exist data volume
      # - ${AUCTIONS_SERVICE_DIR_PATH}/auctions-service/db/fill_tables_w_data.sql:/docker-entrypoint-initdb.d/fill_tables_w_data.sql # runs if !exist data volume
      - pgdata:/var/lib/postgresql/data # allows persistence; see https://github.com/docker-library/postgres/issues/116
    networks:
      - my-application-network
    ports:
      - "3306:3306"                     # for managment
      - "5432:5432"                     # for message traffic
    # restart: always
  auctions-service:
    image: auctions-service:latest
    container_name: auctions-service
    hostname: auctions-service
    # entrypoint: ./main inmemory            # execute the compiled main program (golang); use inmemory database
    # entrypoint: ./main sql                 # execute the compiled main program (golang); use sql databases; remove docker image to start w/ blank slate
    # entrypoint: /bin/bash
    entrypoint: /run_after_java_builds.sh
    # entrypoint: /run_after_java_builds_debug.sh
    tty: true
    stdin_open: true
    restart: on-failure                 # restarts container when it goes down
    volumes:
      - ${AUCTIONS_SERVICE_DIR_PATH}/auctions-service:/go/src/auctions-service-debug # for debugging, mount src folder as separate folder
      # - "./run_after_java_builds.sh:/go/bin/auctions-service/run_after_java_builds.sh"
      - "${AUCTIONS_SERVICE_DIR_PATH}/auctions-service/run_after_java_builds.sh:/go/bin/auctions-service/run_after_java_builds.sh" # for debugging
      - "${AUCTIONS_SERVICE_DIR_PATH}/auctions-service/run_after_java_builds_debug.sh:/go/bin/auctions-service/run_after_java_builds_debug.sh" # for debugging
    networks:
      - my-application-network
    ports:
      - "10000:10000"
    depends_on:
      - rabbitmq-server
      - auctions-postgres-server
      - user-service
  #### CAM SERVICE
  cam-mongo-server:
    build:
      context: ${CAM_SERVICE_DIR_PATH}/mongodb
    image: cam-mongo-server:latest
    container_name: cam-mongo-server
    hostname: cam-mongo-server
    environment:
      - MONGODB_PASS=password
    volumes:
      # - ${CLOSED_AUCTION_METRICS_SERVICE_DIR_PATH}/closed-auction-metrics/src/db/init:/docker-entrypoint-initdb.d # runs if !exist data volume
      - mongodata:/data/db # allows persistence; see https://betterprogramming.pub/persistent-databases-using-dockers-volumes-and-mongodb-9ac284c25b39
    networks:
      - my-application-network
    ports:
      - "28017:28017"
      - "27017:27017"
    # restart: always
  cam-service:
    image: cam-service:latest
    container_name: cam-service
    hostname: cam-service
    # entrypoint: python3 api_main.py         # execute main program (python)
    entrypoint: python3 /closed-auction-metrics-debug/src/api_main.py         # for debugging
    # entrypoint: /bin/bash
    tty: true
    stdin_open: true
    restart: on-failure                 # restarts container when it goes down
    volumes:
      - ${CAM_SERVICE_DIR_PATH}/closed-auction-metrics:/closed-auction-metrics-debug # for debugging, mount src folder as separate folder
    networks:
      - my-application-network
    ports:
      - "10002:51224"
    depends_on:
      - rabbitmq-server
      - cam-mongo-server
  #### USER-SERVICE
  user-service:
    build:
      context: https://github.com/MPCS51205-TMACs/user-service.git
    image: maven/builder:user-service
    container_name: user-service
    # hostname: user [MAY NOT BE NEEDED]
    ports:
      - "8081:8080" # make sure unique
    environment:
      - POSTGRES_USER=user-service
      - POSTGRES_PASSWORD=user-service
      - POSTGRES_DB=user
    volumes:
      - "${USER_SERVICE_IMG_DOCKERFILE}/src:/build/src"
      - "${USER_SERVICE_IMG_DOCKERFILE}/target:/build/target:cached"
      # - "./ishealthy-user.sh:/build/ishealthy-user.sh"
    command: "mvn spring-boot:run"
    depends_on:
      - postgres-user
      - rabbitmq-server
    networks:
      - my-application-network
    restart: on-failure                 # restarts container when it goes down
    # healthcheck:
    #   test: ["CMD", "/build/ishealthy-user.sh"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 20
  postgres-user:
    image: postgres
    container_name: postgres-user
    ports:
      - "5433:5432" # CHANGE PER SERVICE MAKE SURE HOSTPORTS UNIQUE
    environment:
      POSTGRES_USER: user-service
      POSTGRES_PASSWORD: user-service
      POSTGRES_DB: user
    networks:
      - my-application-network
  #### WATCHLIST
  postgres-watchlist:
    image: postgres
    container_name: postgres-watchlist
    ports:
      - 5434:5432 # make sure LHS port unique!
    environment:
      POSTGRES_USER: watchlist-service
      POSTGRES_PASSWORD: watchlist-service
      POSTGRES_DB: watchlist
    networks:
      - my-application-network
  watchlist: # NOTE: WILL FAIL IF CERTAIN EXCHANGES / QUEUES DONT EXIST
    build:
      context: https://github.com/MPCS51205-TMACs/watchlist-service.git
    image: maven/builder:watchlist-service
    container_name: watchlist-service
    ports:
      - "8082:8080" # make sure LHS port unique
    volumes:
      - "${WATCHLIST_IMG_DOCKERFILE}/src:/build/src"
      - "${WATCHLIST_IMG_DOCKERFILE}/target:/build/target:cached"
    command: "mvn spring-boot:run"
    networks:
      - my-application-network
    depends_on:
      - rabbitmq-server
      - postgres-watchlist
  #### ITEM-SERVICE
  item-service:
    build:
      context: .
    image: item-service:latest
    container_name: item-service
    hostname: item-service
    restart: on-failure
    ports:
      - "8088:8088" # make sure LHS port unique
    volumes:
      - "${ITEM_IMG_DOCKERFILE}/src:/build/src"
      - "${ITEM_IMG_DOCKERFILE}/target:/build/target:cached"
    command: "mvn spring-boot:run"
    depends_on:
      - postgres-item
      - rabbitmq-server
    networks:
      - my-application-network
  postgres-item:
    image: postgres
    container_name: postgres-item
    ports:
      - "5435:5432" # make sure LHS port unqiue
    environment:
      POSTGRES_USER: item-service
      POSTGRES_PASSWORD: item-service
      POSTGRES_DB: item
    networks:
      - my-application-network
  #### NOTIFICATION-SERVICE
  notification-service:
    build:
      context: .
    image: maven/builder:notification-service
    container_name: notification-service
    hostname: notification-service
    restart: on-failure
    ports:
      - "8083:8080" # make sure LHS port unique
    volumes:
      - "${NOTIFICATION_IMG_DOCKERFILE}/src:/build/src"
      - "${NOTIFICATION_IMG_DOCKERFILE}/target:/build/target:cached"
    command: "mvn spring-boot:run"
    depends_on:
      - postgres-notification
      - rabbitmq-server
    networks:
      - my-application-network
  postgres-notification:
    image: postgres
    container_name: postgres-notification
    ports:
      - "5436:5432" # make sure LHS port unqiue
    environment:
      POSTGRES_USER: notification-service
      POSTGRES_PASSWORD: notification-service
      POSTGRES_DB: notification
    networks:
      - my-application-network
  ### SHOPPING-CART
  cart-mongo-server:
    build:
      context: "${PROJECT_DIR_PATH}/shopping-cart-service/mongodb"
    image: cart-mongo-server:latest
    container_name: cart-mongo-server
    hostname: cart-mongo-server
    environment:                        # sets environment variables
      - MONGODB_PASS=password
    # volumes:
    #    - mongodata:/data/db # allows persistence; see https://betterprogramming.pub/persistent-databases-using-dockers-volumes-and-mongodb-9ac284c25b39
    networks:
      - my-application-network
    ports:
      - "28018:28017" # make sure LHS port unique
      - "27018:27017" # make sure LHS port unique
    restart: always
  shopping-cart-service:
    build:
      context: "${SHOPPING_CART_IMG_DOCKERFILE}"
    image: shopping-cart-service:latest
    container_name: shopping-cart-service
    hostname: shopping-cart-service
    # entrypoint: python3 api_main.py         # execute the compiled main program (python)
    entrypoint: python3 /shopping-cart-service-debug/src/api_main.py         # for debugging
    # entrypoint: /bin/bash
    tty: true
    stdin_open: true
    restart: on-failure
    volumes:
      - ${SHOPPING_CART_IMG_DOCKERFILE}:/shopping-cart-service-debug # for debugging, mount src folder as separate folder
    networks:
      - my-application-network
    ports:
      - "10001:10001"
    depends_on:
      - rabbitmq-server
      - cart-mongo-server
  #### GATEWAY
  gateway:
    build:
      context: ${GATEWAY_IMG_DOCKERFILE}
    image: maven/builder:gateway
    container_name: gateway
    ports:
      - "8080:8080" # make sure unique
    volumes:
      - "${GATEWAY_IMG_DOCKERFILE}/src:/build/src"
      - "${GATEWAY_IMG_DOCKERFILE}/target:/build/target:cached"
    command: "mvn spring-boot:run"
    networks:
      - my-application-network
    depends_on:
      - postgres-gateway
      - rabbitmq-server
    #   - auctions-service # MAKE DEPEND ON EVERY MICROSERVICE
    #   - cam-service
    #   - user-service
    #   - watchlist
    
  postgres-gateway:
    image: postgres
    container_name: postgres-gateway
    ports:
      - "5437:5432"
    environment:
      POSTGRES_USER: gateway
      POSTGRES_PASSWORD: gateway
      POSTGRES_DB: revoked_tokens
    networks: # allows containers to recognize the hostnames of other containers
      - my-application-network
  #### GATEWAY PYTHON
  # gateway-python:
  #   image: gateway-python:latest
  #   container_name: gateway-python
  #   hostname: gateway-python
  #   # entrypoint: python3 gateway_api_main.py         # execute main program (python)
  #   entrypoint: /bin/bash
  #   tty: true
  #   stdin_open: true
  #   restart: on-failure                 # restarts container when it goes down
  #   volumes:
  #     - ${
      mount src folder as separate folder
    networks:
      - my-application-network
    ports:
      - "10001:10001"
    depends_on:
      - rabbitmq-server
      - cart-mongo-server
  #### GATEWAY
  gateway:
    build:
      context: ${GATEWAY_IMG_DOCKERFILE}
    image: maven/builder:gateway
    container_name: gateway
    ports:
      - "8080:8080" # make sure unique
    volumes:
      - "${GATEWAY_IMG_DOCKERFILE}/src:/build/src"
      - "${GATEWAY_IMG_DOCKERFILE}/target:/build/target:cached"
    command: "mvn spring-boot:run"
    networks:
      - my-application-network
    depends_on:
      - postgres-gateway
      - rabbitmq-server
    #   - auctions-service # MAKE DEPEND ON EVERY MICROSERVICE
    #   - cam-service
    #   - user-service
    #   - watchlist
    
  postgres-gateway:
    image: postgres
    container_name: postgres-gateway
    ports:
      - "5437:5432"
    environment:
      POSTGRES_USER: gateway
      POSTGRES_PASSWORD: gateway
      POSTGRES_DB: revoked_tokens
    networks: # allows containers to recognize the hostnames of other containers
      - my-application-network
  #### GATEWAY PYTHON
  # gateway-python:
  #   image: gateway-python:latest
  #   container_name: gateway-python
  #   hostname: gateway-python
  #   # entrypoint: python3 gateway_api_main.py         # execute main program (python = relative(nuxt.options.srcDir, resolve(nuxt.options.srcDir, mount src folder as separate folder
    networks:
      - my-application-network
    ports:
      - "10001:10001"
    depends_on:
      - rabbitmq-server
      - cart-mongo-server
  #### GATEWAY
  gateway:
    build:
      context: ${GATEWAY_IMG_DOCKERFILE}
    image: maven/builder:gateway
    container_name: gateway
    ports:
      - "8080:8080" # make sure unique
    volumes:
      - "${GATEWAY_IMG_DOCKERFILE}/src:/build/src"
      - "${GATEWAY_IMG_DOCKERFILE}/target:/build/target:cached"
    command: "mvn spring-boot:run"
    networks:
      - my-application-network
    depends_on:
      - postgres-gateway
      - rabbitmq-server
    #   - auctions-service # MAKE DEPEND ON EVERY MICROSERVICE
    #   - cam-service
    #   - user-service
    #   - watchlist
    
  postgres-gateway:
    image: postgres
    container_name: postgres-gateway
    ports:
      - "5437:5432"
    environment:
      POSTGRES_USER: gateway
      POSTGRES_PASSWORD: gateway
      POSTGRES_DB: revoked_tokens
    networks: # allows containers to recognize the hostnames of other containers
      - my-application-network
  #### GATEWAY PYTHON
  # gateway-python:
  #   image: gateway-python:latest
  #   container_name: gateway-python
  #   hostname: gateway-python
  #   # entrypoint: python3 gateway_api_main.py         # execute main program (python))GATEWAY_IMG_DOCKERFILE}:/gateway-python-debug # for debugging, mount src folder as separate folder
  #   networks:
  #     - my-application-network
  #   ports:
  #     - "8080:8080"

networks:
  my-application-network:
    driver: bridge

volumes:
  pgdata: # clear persisted data with 'docker volume rm project-deploy_pgdata'
  mongodata: # clear persisted data with 'docker volume rm project-deploy_mongodata'
